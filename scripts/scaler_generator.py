import argparse


def main():
    parser = argparse.ArgumentParser(prog="Image scaler generator")
    parser.add_argument("-o", "--output", default="PositionScaler",
                        help="Output module/file name", type=str)
    parser.add_argument("--name-suffix", default=None,
                        help="Output file name", type=str)
    parser.add_argument("-s", "--source-size", required=True, type=int,
                        help="Source data size (in pixels)")
    parser.add_argument("-t", "--target-size", required=True, type=int,
                        help="Target data size (in pixels)")
    args = parser.parse_args()

    source_pixels = args.source_size
    target_pixels = args.target_size

    if target_pixels <= 0:
        print("Invalid \"target-size\" value")
        exit(1)

    if source_pixels <= 0:
        print("Invalid \"source-size\" value")
        exit(1)

    scale_factor = target_pixels / source_pixels

    module_name = args.output
    if args.name_suffix is not None:
        module_name = module_name + "_" + args.name_suffix

    module_start = \
        f"""// This module was generated by scale_generator.py script

module {module_name}
#(
    parameter SOURCE_PIXELS = {source_pixels},
    parameter TARGET_PIXELS = {target_pixels}
)
(
    input wire [10:0] source_position,
    output reg [1:0] position_increment
);

    localparam real SCALE_FACTOR = real'(TARGET_PIXELS) / real'(SOURCE_PIXELS);
    
    always_comb @(source_position) begin
        case (source_position)
        """

    acc = 0
    case_choices = []
    for n in range(source_pixels):
        new_pos = round(scale_factor * (n + 1))
        d = new_pos - acc
        choice_str = \
            f"""{n}: position_increment = 'd{d};
            """
        case_choices.append(choice_str)
        acc = acc + d

    module_end = \
        """default:
                position_increment = 'd0;
        endcase
    end
endmodule
"""

    full_module_text = module_start + ''.join(case_choices) + module_end
    output_name = module_name + ".sv"

    with open(output_name, "w") as f:
        f.write(full_module_text)

    print(f"Module successfully saved to \"{args.output}\" file")


if __name__ == "__main__":
    main()
